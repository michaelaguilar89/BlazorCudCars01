@page "/chat"
@using BlazorAppCarsCrud.Models
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorAppCarsCrud.Services
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject MessageService messageService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<div class="row">
    <h2 class="mb-3 text-success text-center">Chat</h2>
    <div class="col-md-4">
        @if (status!=null || status != string.Empty)
        {
            <span class="text-danger" >@status</span>
        }
        <EditForm Model="@newMessage" OnValidSubmit="SendMessage">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input @bind="newMessage.Id" hidden="true" />
            <div class="mb-3">
                <input type="text" @bind="newMessage.User" placeholder="Usuario" id="TextInput" class="form-control">
                <ValidationMessage For="@(()=> newMessage.User)" />
            </div>
            <div class="mb-3">
                <textarea @bind="newMessage.Text" id="TextArea" class="form-control" placeholder="Escribe tu mensaje"></textarea>
                <ValidationMessage For="@(()=> newMessage.Text)" />
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Enviar</button>
                <button type="button" @onclick="DeleteChat" class="btn btn-danger">Clean Chat</button>
            </div>


        </EditForm>


    </div>
    <div class="col-md-8">
        <ul>
            @if (status!=null)
            {
                <h3 class="text-center text-primary">@status</h3>
            }
            @if ( messages==null)
            {
                <p>Loading</p>
            }
            else
            {
                @foreach (var message in messages)
                {
                    <li><strong>@message.Date | @message.User:</strong> @message.Text</li>
                }
            }

        </ul>

    </div>

</div>


@code {
    private Message newMessage= new();
    private List<Message> messages = new List<Message>();
    public string status;
    private string option = "Send";
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<DateTime,string, string>("ReceiveMessage", async (date,user, message) =>
        {
            if (message.Equals("Delete"))
            {

                messages.Clear();
                status = "Chat is clean by " + user;
                messages.Add(new Message { Date = date, User = user, Text = message });
                await InvokeAsync(StateHasChanged);
            }else{
                messages.Add(new Message { Date = date, User = user, Text = message });
                await InvokeAsync(StateHasChanged);
            }


        });

        await hubConnection.StartAsync();

        await LoadChat();
    }

    private async Task LoadChat() {

        messages = await messageService.Get();
    }

    private async Task DeleteChat(){
        option = "Delete";
        var result= await messageService.Delete();
        if (result)
        {
            status = "Chat is clean!";
        }
        if (result==false)
        {
            status = "Error : Chat isn't clean ";
        }
        await SendMessage();
        await LoadChat();
        option = "Send";

    }




    private async Task SendMessage()
    {
        status = null;

        newMessage.Id = Guid.NewGuid().ToString();
        newMessage.Date = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc); 
        if (option.Equals("Delete"))
        {
            newMessage.Text = "Delete";
        
           
        }
        await hubConnection.SendAsync("SendMessage", newMessage.Date, newMessage.User, newMessage.Text);
        var state = await messageService.AddAsync(newMessage);
        if (state != "1")
        {
            status = state;
        }
        newMessage.Text = string.Empty;
        
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    
}
